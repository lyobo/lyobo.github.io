{"pages":[{"title":"分类列表","text":"","link":"/categories/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/09/10/hello-world/"},{"title":"测试文件","text":"this is a picture test file tasdfajsdlkfj laksdjf klasdlf","link":"/2019/09/10/测试文件/"},{"title":"牛客刷题","text":"求二叉树的最大深度主要思想——递归 12345678910111213141516171819class Solution {public: int maxDepth(TreeNode *root) { if(!root) { return 0; } int l=0,r=0; if(root-&gt;right) { r = maxDepth(root-&gt;right); } if(root-&gt;left) { l = maxDepth(root-&gt;left); } return max(l,r) + 1; }}; 求二叉树的最小深度注意递归停止的条件，考虑左右节点均为空的情况。 1234567891011121314151617181920212223class Solution {public: int run(TreeNode *root) { if(!root) { return 0; } int l=0,r=0; if(root-&gt;right) { r = run(root-&gt;right); } if(root-&gt;left) { l = run(root-&gt;left); } if(l==0||r==0) { return 1+r+l; } return min(l,r) +1; }};","link":"/2019/09/17/牛客刷题/"}],"tags":[{"name":"树","slug":"树","link":"/tags/树/"}],"categories":[{"name":"research","slug":"research","link":"/categories/research/"},{"name":"coding","slug":"coding","link":"/categories/coding/"}]}